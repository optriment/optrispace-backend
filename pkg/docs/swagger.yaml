basePath: /
definitions:
  controller.createApplicationParams:
    properties:
      comment:
        type: string
      price:
        type: number
    required:
    - comment
    - price
    type: object
  controller.createContractParams:
    properties:
      application_id:
        type: string
      description:
        type: string
      duration:
        type: integer
      price:
        type: number
      title:
        type: string
    required:
    - application_id
    - description
    - price
    - title
    type: object
  controller.createJobParams:
    properties:
      budget:
        type: number
      description:
        type: string
      duration:
        type: integer
      title:
        type: string
    required:
    - description
    - title
    type: object
  controller.loginParams:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  controller.newMessage:
    properties:
      text:
        type: string
    type: object
  controller.newPasswordParams:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    type: object
  controller.updateJobParams:
    properties:
      budget:
        type: number
      description:
        type: string
      duration:
        type: integer
      title:
        type: string
    required:
    - description
    - title
    type: object
  controller.updatePerson:
    properties:
      display_name:
        type: string
      email:
        type: string
      ethereum_address:
        type: string
    type: object
  echo.HTTPError:
    properties:
      message: {}
    type: object
  model.ApplicationDTO:
    properties:
      applicant_display_name:
        type: string
      applicant_ethereum_address:
        type: string
      applicant_id:
        type: string
      comment:
        type: string
      contract_id:
        type: string
      contract_status:
        type: string
      created_at:
        type: string
      id:
        type: string
      job_budget:
        type: number
      job_description:
        type: string
      job_id:
        type: string
      job_title:
        type: string
      price:
        type: number
    type: object
  model.BackendError:
    properties:
      message:
        type: string
      tech_info:
        type: string
    type: object
  model.Chat:
    properties:
      created_at:
        type: string
      id:
        type: string
      messages:
        items:
          $ref: '#/definitions/model.Message'
        type: array
      topic:
        type: string
    type: object
  model.ChatDTO:
    properties:
      application_id:
        type: string
      contract_id:
        type: string
      id:
        type: string
      job_id:
        type: string
      kind:
        type: string
      participants:
        items:
          $ref: '#/definitions/model.ParticipantDTO'
        type: array
      title:
        type: string
      topic:
        type: string
    type: object
  model.ContractDTO:
    properties:
      application_id:
        type: string
      contract_address:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      customer_address:
        type: string
      customer_display_name:
        type: string
      customer_id:
        type: string
      description:
        type: string
      duration:
        type: integer
      id:
        type: string
      performer_address:
        type: string
      performer_display_name:
        type: string
      performer_id:
        type: string
      price:
        type: number
      status:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  model.JobCardDTO:
    properties:
      applications_count:
        type: integer
      budget:
        type: number
      created_at:
        type: string
      created_by:
        type: string
      customer_display_name:
        type: string
      customer_ethereum_address:
        type: string
      description:
        type: string
      duration:
        type: integer
      id:
        type: string
      is_suspended:
        type: boolean
      title:
        type: string
      updated_at:
        type: string
    type: object
  model.JobDTO:
    properties:
      applications_count:
        type: integer
      budget:
        type: number
      created_at:
        type: string
      created_by:
        type: string
      customer_display_name:
        type: string
      customer_ethereum_address:
        type: string
      description:
        type: string
      duration:
        type: integer
      id:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  model.Message:
    properties:
      author_name:
        type: string
      chat_id:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      text:
        type: string
    type: object
  model.ParticipantDTO:
    properties:
      display_name:
        type: string
      ethereum_address:
        type: string
      id:
        type: string
    type: object
  model.Person:
    properties:
      created_at:
        type: string
      display_name:
        type: string
      email:
        type: string
      ethereum_address:
        type: string
      id:
        type: string
      is_admin:
        type: boolean
      login:
        type: string
      password:
        type: string
      realm:
        type: string
      resources:
        type: string
    type: object
  model.Stats:
    properties:
      opened_jobs:
        type: integer
      registrations_by_date:
        additionalProperties:
          type: integer
        type: object
      total_contracts:
        type: integer
      total_registrations:
        type: integer
      total_transactions_volume:
        type: number
    type: object
  model.UserContext:
    properties:
      authenticated:
        type: boolean
      subject:
        $ref: '#/definitions/model.Person'
      token:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: OptriSpace Server API
  license:
    name: MIT
    url: https://github.com/optriment/optrispace-backend/blob/develop/LICENSE
  title: OptriSpace API
  version: "1.0"
paths:
  /applications:
    get:
      consumes:
      - application/json
      description: Returns applications
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.ApplicationDTO'
            type: array
        "401":
          description: user not authorized
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: List of applications
      tags:
      - application
  /applications/{id}:
    get:
      consumes:
      - application/json
      description: Returns an application by ID
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ApplicationDTO'
        "401":
          description: user not authorized
          schema:
            $ref: '#/definitions/model.BackendError'
        "404":
          description: application not found
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: Get an application
      tags:
      - application
  /applications/{id}/chat:
    get:
      consumes:
      - application/json
      description: Performer or customer is getting chat for this application
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Chat'
        "401":
          description: user not authorized
          schema:
            $ref: '#/definitions/model.BackendError'
        "404":
          description: application not found or user has no permissions for view chat
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: Get chat for an application
      tags:
      - application
      - chat
  /chats:
    get:
      consumes:
      - application/json
      description: User is requesting all available chats sorted by last message create
        time in reverse order
      produces:
      - application/json
      responses:
        "200":
          description: chat will be returned with all messages
          schema:
            items:
              $ref: '#/definitions/model.ChatDTO'
            type: array
        "401":
          description: user is not authorized
          schema:
            $ref: '#/definitions/model.BackendError'
        "403":
          description: user is not conversation participant
          schema:
            $ref: '#/definitions/model.BackendError'
        "404":
          description: chat does not exist
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: Returns list of chats for the current user
      tags:
      - chat
  /chats/{chat_id}:
    get:
      consumes:
      - application/json
      description: A chat participant is requesting chat description with all messages
      parameters:
      - description: chat id
        in: path
        name: chat_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: chat will be returned with all messages
          schema:
            $ref: '#/definitions/model.Chat'
        "401":
          description: user is not authorized
          schema:
            $ref: '#/definitions/model.BackendError'
        "403":
          description: user is not conversation participant
          schema:
            $ref: '#/definitions/model.BackendError'
        "404":
          description: chat does not exist
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: Returns a fully chat description
      tags:
      - chat
  /chats/{chat_id}/messages:
    post:
      consumes:
      - application/json
      description: A chat participant sending message to the chat
      parameters:
      - description: New message
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/controller.newMessage'
      - description: chat id
        in: path
        name: chat_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "401":
          description: user is not authorized
          schema:
            $ref: '#/definitions/model.BackendError'
        "403":
          description: user is not conversation participant
          schema:
            $ref: '#/definitions/model.BackendError'
        "404":
          description: chat does not exist
          schema:
            $ref: '#/definitions/model.BackendError'
        "422":
          description: message text exceeds maximum text length
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: Post a new message to the chat
      tags:
      - chat
  /contracts:
    get:
      consumes:
      - application/json
      description: Returns list of contracts where the current user is performer or
        customer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.ContractDTO'
            type: array
        "401":
          description: user not authorized
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: List contracts
      tags:
      - contract
    post:
      consumes:
      - application/json
      description: Creates a new contract based on existent application.
      parameters:
      - description: Contract Params
        in: body
        name: job
        required: true
        schema:
          $ref: '#/definitions/controller.createContractParams'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ContractDTO'
        "400":
          description: invalid format
          schema:
            $ref: '#/definitions/model.BackendError'
        "409":
          description: duplication
          schema:
            $ref: '#/definitions/model.BackendError'
        "422":
          description: validation failed
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: Create a new contract
      tags:
      - contract
  /contracts/{id}:
    get:
      consumes:
      - application/json
      description: Returns contract with specified id. This operation is allowed only
        for performer or customer.
      parameters:
      - description: Contract ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ContractDTO'
        "401":
          description: user not authorized
          schema:
            $ref: '#/definitions/model.BackendError'
        "404":
          description: contract not found or user not authorized to view contract
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: Get contract
      tags:
      - contract
  /contracts/{id}/accept:
    post:
      consumes:
      - application/json
      description: Performer is accepting contract
      parameters:
      - description: Contract ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ContractDTO'
        "401":
          description: user not authorized
          schema:
            $ref: '#/definitions/model.BackendError'
        "403":
          description: insufficient rights
          schema:
            $ref: '#/definitions/model.BackendError'
        "404":
          description: contract not found or user not authorized to view contract
          schema:
            $ref: '#/definitions/model.BackendError'
        "422":
          description: validation failed
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: Accept contract
      tags:
      - contract
  /contracts/{id}/approve:
    post:
      consumes:
      - application/json
      description: Customer is approving performer's working results
      parameters:
      - description: Contract ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ContractDTO'
        "401":
          description: user not authorized
          schema:
            $ref: '#/definitions/model.BackendError'
        "403":
          description: insufficient rights
          schema:
            $ref: '#/definitions/model.BackendError'
        "404":
          description: contract not found or user not authorized to view contract
          schema:
            $ref: '#/definitions/model.BackendError'
        "422":
          description: insufficient funds on the contract in the blockchain
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: Approve working results and allow to withdraw money from Smart Contract
      tags:
      - contract
  /contracts/{id}/complete:
    post:
      consumes:
      - application/json
      description: Performer is completing contract
      parameters:
      - description: Contract ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ContractDTO'
        "401":
          description: user not authorized
          schema:
            $ref: '#/definitions/model.BackendError'
        "403":
          description: insufficient rights
          schema:
            $ref: '#/definitions/model.BackendError'
        "404":
          description: contract not found or user not authorized to view contract
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: Complete contract
      tags:
      - contract
  /contracts/{id}/deploy:
    post:
      consumes:
      - application/json
      description: Customer has deployed contract to the blockchain
      parameters:
      - description: Contract ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ContractDTO'
        "400":
          description: invalid format
          schema:
            $ref: '#/definitions/model.BackendError'
        "401":
          description: user not authorized
          schema:
            $ref: '#/definitions/model.BackendError'
        "403":
          description: insufficient rights
          schema:
            $ref: '#/definitions/model.BackendError'
        "404":
          description: contract not found or user not authorized to view contract
          schema:
            $ref: '#/definitions/model.BackendError'
        "422":
          description: validation failed
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: Deploy contract
      tags:
      - contract
  /contracts/{id}/fund:
    post:
      consumes:
      - application/json
      description: Customer is funded contract in the blockchain
      parameters:
      - description: Contract ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ContractDTO'
        "400":
          description: invalid format
          schema:
            $ref: '#/definitions/model.BackendError'
        "401":
          description: user not authorized
          schema:
            $ref: '#/definitions/model.BackendError'
        "403":
          description: insufficient rights
          schema:
            $ref: '#/definitions/model.BackendError'
        "404":
          description: contract not found or user not authorized to view contract
          schema:
            $ref: '#/definitions/model.BackendError'
        "422":
          description: validation failed
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: Fund contract
      tags:
      - contract
  /contracts/{id}/sign:
    post:
      consumes:
      - application/json
      description: Performer is signing contract
      parameters:
      - description: Contract ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ContractDTO'
        "400":
          description: invalid format
          schema:
            $ref: '#/definitions/model.BackendError'
        "401":
          description: user not authorized
          schema:
            $ref: '#/definitions/model.BackendError'
        "403":
          description: insufficient rights
          schema:
            $ref: '#/definitions/model.BackendError'
        "404":
          description: contract not found or user not authorized to view contract
          schema:
            $ref: '#/definitions/model.BackendError'
        "422":
          description: validation failed
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: Sign contract
      tags:
      - contract
  /jobs:
    get:
      consumes:
      - application/json
      description: Returns list of jobs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.JobDTO'
            type: array
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: List jobs
      tags:
      - job
    post:
      consumes:
      - application/json
      description: Creates a new job
      parameters:
      - description: Job Params
        in: body
        name: job
        required: true
        schema:
          $ref: '#/definitions/controller.createJobParams'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.JobDTO'
        "400":
          description: invalid format
          schema:
            $ref: '#/definitions/model.BackendError'
        "422":
          description: validation failed
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: Create a new job
      tags:
      - job
  /jobs/{id}:
    get:
      consumes:
      - application/json
      description: Returns job by id
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JobCardDTO'
        "404":
          description: job not found
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: Get job by id
      tags:
      - job
    put:
      consumes:
      - application/json
      description: Updates job
      parameters:
      - description: Job params
        in: body
        name: job
        required: true
        schema:
          $ref: '#/definitions/controller.updateJobParams'
      - description: Job ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JobDTO'
        "400":
          description: invalid format
          schema:
            $ref: '#/definitions/model.BackendError'
        "401":
          description: user not authorized
          schema:
            $ref: '#/definitions/model.BackendError'
        "404":
          description: job not found or current user is not creator
          schema:
            $ref: '#/definitions/model.BackendError'
        "422":
          description: validation failed
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: Update job
      tags:
      - job
  /jobs/{id}/block:
    post:
      consumes:
      - application/json
      description: Blocks existent job to hide it from public access. To execute this
        action, user must have admin privileges.
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: user not authorized
          schema:
            $ref: '#/definitions/model.BackendError'
        "403":
          description: user is not admin
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: Block a job
      tags:
      - job
  /jobs/{id}/resume:
    post:
      consumes:
      - application/json
      description: Resumes existent job to continue receiving applications
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: user not authorized
          schema:
            $ref: '#/definitions/model.BackendError'
        "403":
          description: user is not an owner
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: Resume a job
      tags:
      - job
  /jobs/{id}/suspend:
    post:
      consumes:
      - application/json
      description: Suspends existent job to stop receiving applications
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: user not authorized
          schema:
            $ref: '#/definitions/model.BackendError'
        "403":
          description: user is not an owner
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: Suspend a job
      tags:
      - job
  /jobs/{job_id}/application:
    get:
      consumes:
      - application/json
      description: Returns an application
      parameters:
      - description: Job ID
        in: path
        name: job_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ApplicationDTO'
        "401":
          description: user not authorized
          schema:
            $ref: '#/definitions/model.BackendError'
        "404":
          description: job not found
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: Get an application for specific job and applicant
      tags:
      - application
  /jobs/{job_id}/applications:
    get:
      consumes:
      - application/json
      description: Returns applications list for the job by job_id
      parameters:
      - description: Job ID
        in: path
        name: job_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.ApplicationDTO'
            type: array
        "401":
          description: user not authorized
          schema:
            $ref: '#/definitions/model.BackendError'
        "404":
          description: job not found
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: List applications for the job
      tags:
      - application
      - job
    post:
      consumes:
      - application/json
      description: Applicant creates a new application for a job
      parameters:
      - description: New application request
        in: body
        name: application
        required: true
        schema:
          $ref: '#/definitions/controller.createApplicationParams'
      - description: Job ID to apply
        in: path
        name: job_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ApplicationDTO'
        "401":
          description: user not authorized
          schema:
            $ref: '#/definitions/model.BackendError'
        "404":
          description: job with specified ID is not found
          schema:
            $ref: '#/definitions/model.BackendError'
        "422":
          description: validation failed
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: Creates a new application for a job
      tags:
      - application
      - job
  /login:
    post:
      consumes:
      - application/json
      description: Create user security token for supplied conditionals
      parameters:
      - description: Login request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.loginParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserContext'
        "422":
          description: unable to login (login or password is not valid)
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      summary: Login
      tags:
      - auth
  /me:
    get:
      consumes:
      - application/json
      description: Returns information about current authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserContext'
        "401":
          description: user not authorized
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: Returns current user information
      tags:
      - auth
  /password:
    put:
      consumes:
      - application/json
      description: Change password for current authenticated user
      parameters:
      - description: Change password request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.newPasswordParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserContext'
        "401":
          description: user not authorized or old password is incorrect
          schema:
            $ref: '#/definitions/model.BackendError'
        "422":
          description: validation failed
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: Change password for current authenticated user
      tags:
      - auth
  /persons/{id}:
    get:
      consumes:
      - application/json
      description: Returns person description by id
      parameters:
      - description: Person ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Person'
        "401":
          description: user not authorized
          schema:
            $ref: '#/definitions/model.BackendError'
        "404":
          description: person not found
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: Get person description by id
      tags:
      - person
    put:
      consumes:
      - application/json
      description: Updates existent person. User must be authenticated as this person.
      parameters:
      - description: Update person details
        in: body
        name: job
        required: true
        schema:
          $ref: '#/definitions/controller.updatePerson'
      - description: Person ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Person'
        "400":
          description: invalid format
          schema:
            $ref: '#/definitions/model.BackendError'
        "401":
          description: user not authorized
          schema:
            $ref: '#/definitions/model.BackendError'
        "403":
          description: insufficient rights
          schema:
            $ref: '#/definitions/model.BackendError'
        "404":
          description: person not found
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: Update existent person
      tags:
      - person
  /persons/{id}/resources:
    put:
      consumes:
      - application/json
      description: Updates resources for existent person. User must be authenticated
        as this person.
      parameters:
      - description: Person resources in JSON
        in: body
        name: job
        required: true
        schema:
          type: string
      - description: Person ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: invalid format (body should be formatted as JSON)
          schema:
            $ref: '#/definitions/model.BackendError'
        "401":
          description: user not authorized
          schema:
            $ref: '#/definitions/model.BackendError'
        "403":
          description: insufficient rights
          schema:
            $ref: '#/definitions/model.BackendError'
        "404":
          description: person not found
          schema:
            $ref: '#/definitions/model.BackendError'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      security:
      - BearerToken: []
      summary: Set resources for person
      tags:
      - person
  /signup:
    post:
      consumes:
      - application/json
      description: Register a new user with specified description
      parameters:
      - description: Register new user
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.Person'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserContext'
        "422":
          description: input object is invalid
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      summary: Register a new user
      tags:
      - auth
  /stats:
    get:
      description: Get stats
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Stats'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/echo.HTTPError'
            - properties:
                message:
                  type: string
              type: object
      summary: Get stats
      tags:
      - stats
securityDefinitions:
  BearerToken:
    description: Bearer token in Authorization header
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
